{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "variables": {
        "ruleId": "017c0d3e-785f-4165-ac61-f0d47c99110a",
        "ruleDisplayName": "Failed Logins"
    },
    "parameters": {
        "location": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Resource group to deploy solution resources"
            }
        },
        "workspace": {
            "type": "string",
            "metadata": {
                "description": "Workspace name for Log Analytics where Sentinel is setup"
            }
        }
    },
    "functions": [],
    "resources": [
        {
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('ruleId'))]",
            "apiVersion": "2020-01-01",
            "kind": "Scheduled",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "description": "MPO rule description",
                "displayName": "[variables('ruleDisplayName')]",
                "enabled": true,
                "query": "let FailureThreshold = 15;
let FailedLogins = Okta_CL
| where eventType_s =~ "user.session.start" and outcome_reason_s =~ "VERIFICATION_ERROR"
| summarize count() by actor_alternateId_s, client_ipAddress_s, bin(TimeGenerated, 5m)
| where count_ > FailureThreshold
| project client_ipAddress_s, actor_alternateId_s;
Okta_CL
| join kind=inner (FailedLogins) on client_ipAddress_s, actor_alternateId_s
| where eventType_s =~ "user.session.start" and outcome_reason_s =~ "VERIFICATION_ERROR"
| summarize count() by actor_alternateId_s, ClientIP = client_ipAddress_s, City = client_geographicalContext_city_s, Country = client_geographicalContext_country_s, column_ifexists('published_t', now())
| sort by column_ifexists('published_t', now()) desc
| extend timestamp = column_ifexists('published_t', now()), IPCustomEntity = ClientIP, AccountCustomEntity = actor_alternateId_s",
                "queryFrequency": "PT1H",
                "queryPeriod": "P2DT1H30M",
                "severity": "High",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": true,
                "tactics": [ "InitialAccess", "Persistence" ],
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0
                // Optional fields:
                //"alertRuleTemplateName": "Source template ID",  
                //"Etag": "*" // needed when upgrading
            }
        }
    ],
    "outputs": {
        "ruleId": {
            "type": "string",
            "value": "[variables('ruleId')]"
        }
    }
}
